# automate_rsync
Configure rsync once, add multiple jobs with simple headings

This script aims to create a simple method for configuring complex rsync jobs and
adding additional jobs easily.

Quick start (tl;dr):

  If no configuration file is found (~/.automate_rsync.rc) the script will walk you
  through the intial configuration.

  $ ./automate_rsync



automate_rsync command refference:

  -c <path to alternate config file>
  -I          interactively add an rsync job
  -q          hush most non-fatal output from this script (does not affect rsync)
  -v          increase verbosity for debugging
  -V          print version and exit
  

.automate_rsyncrc configuration refference:
#This file is automatically generated if it is missing
# commented lines are ignored 
[%BaseConfig]
#These options are not required, but are suggested
rsyncbin=<location of desired rsync binary>
rsyncOptions=<command line options for rsync>
deleteOptions=<deletion options>

#extra ssh options if needed
[%sshOptions]
extraSSH=<additional ssh>

#Human friendly name for rsync job
#consider adding the name of the remote host and what is being synced
[RemomteHost - Source Code]
user=<remote username>
server=<ip or fqdn for remote host>
sshKey=<path to local private ssh key>
localPath=<full path of files to be rsync'd>
remotePath=<appropriate path at remote host for files>
exclude=<quotated and comma separated list of exclude patterns>

#adding a '#' anywhere in a job will cause it to be ignored
[#Ignored Job]
user=bambi
server=hart.of.darkness.com
sshKey=/home/bambi/.ssh/darkness
localPath=/home/bambi/flowers
remotePath=/home/bambi/backup
exclude='/home/bambi/flowers/toadstools', '*.swp', '*nobackup*'


This document assumes a basic understanding of SSH and the ability to connect to 
a remote host using SSH.

Getting Started:
  * Configuring rsync and ssh
    - Generate and install keys for passwordless authentication
    - Determine rsync options

  * Configuring automate-rsync
    - automate_rsync configuration
    - Creating jobs

  * Next steps:
     - Secure rsync/ssh

Configuring rsync and ssh

  This section aims to help setup the userland elements of rsync over ssh. Setting up
  an SSH server is beyond the scope of this document.

  - Generate Keys:
    SSH keys are a method for authenticating on a remote host. To automate rsync over 
    ssh it is important to generate keys that do not require passwords. This creates
    a significant security risk if the keys are compromised. Please see the section
    below on securing SSH with restricted rsync.

    A public key is installed on a remote host and works with its private key pair
    to authenticate a user.  It is vital that the private key remains secure and is
    NEVER shared. The private key should remain on the local computer.


    1) Generate a public/private key set.  If you have an existing key pair make sure 
       to provide an alternative file name (-f <keyname>) to preserve your existing keys.
       Leave the passphrase blank; if a passphrase is specified it will be required 
       every time the key is accessed. Keys are typically kept in ~/.ssh, but can be
       kept any where.

      [LocalHost]$ ssh-keygen -f ~/.ssh/MyKey

      Generating public/private rsa key pair.
      Enter passphrase (empty for no passphrase):
      Enter same passphrase again:
      Your identification has been saved in MyKey.
      Your public key has been saved in MyKey.pub.
      The key fingerprint is:
      e9:70:3b:4b:27:62:cb:54:88:2c:c9:b9:d8:30:28:e3 yourUserName@MyCurrentHost.local
      The key's randomart image is:
      +--[ RSA 2048]----+
      |                 |
      |                 |
      |                 |
      |.. + . . .       |
      |* = o o S        |
      |o* o   = .       |
      |.Eo   + * .      |
      |     + + =       |
      |      o .        |
      +-----------------+

     2) Install the public key on the DestinationServer

        * Transmit the public key to the DestiationServer:
      
          [LocalHost]$ sftp user@DestiationHost

          user@DestnationHosts's password:
          sftp> put myKey.pub
          sftp> quit

        * Connect to the DestinationSever:

          [LocalHost]$ ssh user@DestinationHost
          
          user@DestinationHost's password:
    
        * Backup authroized keys (DO NOT SKIP THIS!)
          [DestinationHost]$ cp ~/.ssh/authorized_keys ~/.ssh/authorized_keys-`date +%Y-%m-%d`

        * Install the public key

          [DestinationHost]$ echo '#Public key from SourceHost - MM/YYYY' >> ~/.ssh/authorized_keys
          [DestinationHost]$ cat ~/MyKey.pub >> ~/.ssh/authorized_keys

        * Disconnect
          [DestinationHost]$ exit

    3) Test your keypair
      * Connect to the DestinationServer with ssh using a specific key

        [LocalHost]$ ssh -o IdentitiesOnly=yes -i ~/.ssh/MyKey user@DestinationHost

        Last login: Thu Sep 27 21:37:20 1999 from 192.1.10.99
        [DestinationHost]$

      * If all goes well you should connect to the DestinationHost without 
        entering a password.  
        Continue on to the next section.
        If a password is requested, try the steps below.

    4) Trouble Shooting
      * Double check your command. Are you specifying the full and proper path to 
        your PRIVATE key?

      * Run ssh in verbose mode:

        [Localhost]$ ssh -o IdentitiesOnly=yes -i ~/.ssh/MyKey user@DestinationHost

      * Look for potential problems. A common issue is specifying the wrong key file:
        
        debug1: Authentications that can continue: publickey,password,keyboard-interactive
        debug1: Next authentication method: publickey
        debug1: Offering RSA public key: /home/user/.ssh/MyKey
        debug1: Authentications that can continue: publickey,password,keyboard-interactive

        ********* This typically indicates that the key was refused.
        debug1: Next authentication method: keyboard-interactive
        debug1: Authentications that can continue: publickey,password,keyboard-interactive
        debug1: Next authentication method: password


  - Determine rsync options:
    Once a passwordless connection has been established an appropriate rsync 
    command needs to be crafted. Rsync is very powerful and its features far 
    exceed the scope of this document. The next section suggests some appropriate 
    settings, but is by no means exhaustive.

    1) Try a simple rsync to the remote:
      * Create a sample directory with a few small files

      [LocalHost]$ mkdir ~/foobar
      [LocalHost]$ date > a.txt
      [LocalHost]$ date > b.txt
      [LocalHost]$ date > c.txt

     * Run a simple rsync to the remote host 
      [LocalHost]$ rsync -avzh ./foo user@DestinationHost:/home/user

      uilding file list ... done
      foo/
      foo/a.txt
      foo/b.txt
      foo/c.txt

      sent 358 bytes  received 92 bytes  128.57 bytes/sec
      total size is 90  speedup is 0.20

    * Rsync should copy the files without prompting for a password

    * If the job does not complete as expected, try the command again but with
      -avvvh for greater verbosity

    2) Consider how deletions and changes should be handled:
      Rsync can deal with deletions in many ways.  Please see the rsync man page 
      for more information. During testing it is a good idea to use --dry-run
      as part of your deletion command.

      * For a one-way backup to a remote host --delete-excluded is probably
        the most useful.

      * --delete is probably the safest as it only deletes extranious files 
        that were previously sent

    3) Test deletion policy:
      * Remove a file from ~/foobar/
        [Localhost]$ rm ~/foobar/c.txt

      * Run rsync with selected deletion command AND --dry-run
        [LocalHost]$ rsync -avzh --delete-excluded --dry-run user@DestinationHost:/home/user

        uilding file list ... done
        deleting foo/c.txt
        foo/

        sent 127 bytes  received 26 bytes  43.71 bytes/sec
        total size is 60  speedup is 0.39

      * Check that the appropriate files are removed

    4) Add an exclusion rule (optional):
      Rsync can exclude paths or certain types of files.  
      * Create a junk directory in ~/foobar/ and fill it with files
        [Localhost]$ mkdir ~/foobar/junk
        [Localhost]$ date > garbage1.txt
        [Localhost]$ date > gargage2.txt
        [Localhost]$ date > goodstuff.txt

      * Create an exclusion rule to exclude only files with "garbage" and test it:
        [Localhost]$ rsync -avzh --delete-excluded --exclude garbage*  user@DestinationHost:/home/user

        building file list ... done
        deleting foo/c.txt
        foo/junk/
        foo/junk/goodstuff.txt

        sent 244 bytes  received 48 bytes  83.43 bytes/sec
        total size is 90  speedup is 0.31

      * Observe that all files with "garbage" in the name were skipped. Directories
        can be excluded either by their entire path or by adding a regular
        expression. Please see the rsync man page for more help.


Configuring automate_rsync
  - automate_rsync configuration:
    The default configuration file is located at: ~/.automate_rsyncrc and will
    be automatically generated if it is missing. Alternative config files can 
    be used with the -c <configfile> command line option.

  - Jobs can be added by using the -I option at the command line

